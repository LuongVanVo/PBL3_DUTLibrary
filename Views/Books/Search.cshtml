@* @model IEnumerable<PBL3_DUTLibrary.Models.Book> *@
@model X.PagedList.IPagedList<PBL3_DUTLibrary.Models.Book>
@{
    ViewData["Title"] = "Search Books";
    Layout = "_LayoutCustomer";
}
@await Html.PartialAsync("_BreadCum")

<section class="ftco-section bg-light">
    @await Html.PartialAsync("SearchPanel")
    <div class="container">
        <div class="row">
            <div class="col-md-8 col-lg-10 order-md-last">
                @if (Model.Count == 0 && !string.IsNullOrEmpty(ViewBag.Query))
                {
                    <div class="no-results-container">
                        <div class="alert alert-info" role="alert">
                            <i class="ion-ios-information-circle mr-2"></i>
                            No books found for your search keyword.
                        </div>
                        <p class="no-results-text">Please try searching with a different keyword or browse through our book categories.</p>
                        <a href="@Url.Action("Index", "Books")" class="btn btn-primary">View all books</a>
                    </div>
                }
                else
                {
                    <div class="row">
                        @await Html.PartialAsync("BooksItem", Model)

                    </div>
                    @* @if (ViewBag.NoResults as bool? == true)
				{
					<div class="alert alert-warning mt-4" role="alert">
						Không tìm thấy sách nào theo từ khóa tìm kiếm của bạn.
					</div>
				} *@
                    <div class="row mt-5">
                        <div class="col text-center">
                            <div class="block-27">
                                @{
                                    int maxPagesAroundCurrent = 2;
                                    int startPage = Model.PageNumber - maxPagesAroundCurrent;
                                    int endPage = Model.PageNumber + maxPagesAroundCurrent;

                                    if (startPage < 1) startPage = 1;
                                    if (endPage > Model.PageCount) endPage = Model.PageCount;
                                    var loaiParams = ViewBag.Loai != null ?
                                    string.Join("&", ((List<string>)ViewBag.Loai).Select(g => $"loai={Uri.EscapeDataString(g)}")) :
                                    "";
                                }
                                <ul>
                                    @if (Model.HasPreviousPage)
                                    {
                                        <li>
                                            <a href="@Url.Action("Search", new { query = ViewBag.Query, page = 1})&@loaiParams">&lt;&lt;</a>
                                        </li>
                                        <li>
                                            <a href="@Url.Action("Search", new { query = ViewBag.Query, page = Model.PageNumber - 1 })&@loaiParams">&lt;</a>
                                        </li>
                                    }

                                    @if (startPage > 1)
                                    {
                                        <li>
                                            <a href="@Url.Action("Search", new { query = ViewBag.Query, page = 1 })&@loaiParams">1</a>
                                        </li>
                                        @if (startPage > 2)
                                        {
                                            <li class="disabled">
                                                <span>...</span>
                                            </li>
                                        }
                                    }

                                    @for (int i = startPage; i <= endPage; i++)
                                    {
                                        <li class="@(i == Model.PageNumber ? "active" : "")">
                                            <a href="@Url.Action("Search", new { query = ViewBag.Query, page = i})&@loaiParams">@i</a>
                                        </li>
                                    }

                                    @if (endPage < Model.PageCount)
                                    {
                                        @if (endPage < Model.PageCount - 1)
                                        {
                                            <li class="disabled">
                                                <span>...</span>
                                            </li>
                                        }
                                        <li>
                                            <a href="@Url.Action("Search", new { query = ViewBag.Query, page = Model.PageCount })&@loaiParams">@Model.PageCount</a>
                                        </li>
                                    }

                                    @if (Model.HasNextPage)
                                    {
                                        <li>
                                            <a href="@Url.Action("Search", new { query = ViewBag.Query, page = Model.PageNumber + 1})&@loaiParams">&gt;</a>
                                        </li>
                                        <li>
                                            <a href="@Url.Action("Search", new { query = ViewBag.Query, page = Model.PageCount })&@loaiParams">&gt;&gt;</a>
                                        </li>
                                    }
                                </ul>

                            </div>
                        </div>
                    </div>
                }


            </div>

            <div class="col-md-4 col-lg-2">
                @await Component.InvokeAsync("ListGenreBooks")
            </div>
        </div>
    </div>
</section>